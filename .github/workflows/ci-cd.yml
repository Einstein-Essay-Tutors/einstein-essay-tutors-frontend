name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm test
      continue-on-error: true
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://35.83.66.24' }}
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy-package
        
        # Check if standalone build exists, otherwise use regular build
        if [ -d ".next/standalone" ]; then
          echo "Using standalone build"
          # Copy standalone application
          cp -r .next/standalone/* deploy-package/
          # Copy static assets to standalone structure
          cp -r .next/static deploy-package/.next/
          cp -r public deploy-package/
        else
          echo "Standalone build not found, using regular build structure"
          # Copy the entire .next directory
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp -r node_modules deploy-package/
          # Copy source for fallback
          cp -r src deploy-package/
        fi
        
        # Copy configuration files
        cp ecosystem.config.js deploy-package/
        cp deploy.sh deploy-package/
        cp package.json deploy-package/
        
        # Create archive
        tar -czf frontend-build.tar.gz -C deploy-package .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend-build.tar.gz
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
    
    - name: Deploy to production server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: "frontend-build.tar.gz"
        target: "/tmp/"
    
    - name: Execute deployment on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Set deployment variables
          PROJECT_DIR="/home/ubuntu/essay-writing-tutors/einstein-essay-tutors-frontend"
          APP_NAME="einstein-essay-tutors-frontend"
          BUILD_ARCHIVE="/tmp/frontend-build.tar.gz"
          
          # Create project directory structure if it doesn't exist
          sudo mkdir -p "$PROJECT_DIR"
          sudo chown -R ubuntu:ubuntu /home/ubuntu/essay-writing-tutors
          
          # Clone or update repository for configs with failsafe
          if [ -d "$PROJECT_DIR/.git" ]; then
            echo "Repository exists, pulling latest changes..."
            cd "$PROJECT_DIR"
            if git pull origin main; then
              echo "Successfully pulled latest changes"
            else
              echo "Git pull failed, removing corrupted repo and recloning..."
              cd ..
              sudo rm -rf "$PROJECT_DIR"
              git clone git@github.com:ewt-writers/einstein-essay-tutors-frontend.git "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi
          else
            # If directory exists but is not a git repo, remove it first
            if [ -d "$PROJECT_DIR" ]; then
              echo "Directory exists but is not a git repository, removing..."
              sudo rm -rf "$PROJECT_DIR"
            fi
            echo "Cloning repository..."
            if git clone git@github.com:ewt-writers/einstein-essay-tutors-frontend.git "$PROJECT_DIR"; then
              cd "$PROJECT_DIR"
              echo "Successfully cloned repository"
            else
              echo "Git clone failed, exiting deployment"
              exit 1
            fi
          fi
          
          # Verify we're in the correct directory with required files
          if [ ! -f "ecosystem.config.js" ] || [ ! -f "package.json" ]; then
            echo "Required configuration files not found, deployment cannot continue"
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            exit 1
          fi
          
          # Stop all frontend-related PM2 processes
          pm2 stop "$APP_NAME" 2>/dev/null || echo "New process not currently running"
          pm2 stop "ewt-frontend" 2>/dev/null || echo "Old process not currently running"
          pm2 delete "$APP_NAME" 2>/dev/null || echo "New process not in PM2"
          pm2 delete "ewt-frontend" 2>/dev/null || echo "Old process not in PM2"
          
          # Kill any processes using port 3000
          sudo lsof -ti:3000 | xargs sudo kill -9 2>/dev/null || echo "No processes on port 3000"
          
          # Backup current build (if exists)
          if [ -d ".next" ]; then
            rm -rf .next.backup 2>/dev/null || true
            mv .next .next.backup 2>/dev/null || true
          fi
          
          # Extract new build
          tar -xzf "$BUILD_ARCHIVE" -C "$PROJECT_DIR" --overwrite
          
          # Set proper permissions
          chmod +x deploy.sh 2>/dev/null || true
          
          # Create logs directory
          sudo mkdir -p /home/ubuntu/logs
          sudo chown ubuntu:ubuntu /home/ubuntu/logs
          
          # Update PM2 to resolve version mismatch
          pm2 update
          
          # Start the application with PM2
          pm2 start ecosystem.config.js
          
          # Save PM2 configuration
          pm2 save
          
          # Wait for application to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Frontend deployment successful!"
            # Remove backup on success
            rm -rf .next.backup 2>/dev/null || true
          else
            echo "❌ Frontend health check failed!"
            # Rollback on failure
            if [ -d ".next.backup" ]; then
              echo "🔄 Rolling back to previous version..."
              rm -rf .next 2>/dev/null || true
              mv .next.backup .next
              pm2 restart "$APP_NAME"
              sleep 5
              curl -f http://localhost:3000/ && echo "Rollback successful" || echo "Rollback failed"
            fi
            exit 1
          fi
          
          # Reload nginx
          sudo systemctl reload nginx
          
          # Clean up
          rm -f "$BUILD_ARCHIVE"
          
          # Show final status
          pm2 list
          echo "🎉 Frontend deployment completed successfully!"